{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the BodyBase application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username, which must be unique."
        },
        "passwordHash": {
          "type": "string",
          "description": "Hashed password for authentication.  NEVER store plain text passwords."
        },
        "walletAddress": {
          "type": "string",
          "description": "The user's wallet address on the Base network."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "username",
        "passwordHash",
        "walletAddress",
        "createdAt",
        "updatedAt"
      ]
    },
    "Step": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Step",
      "type": "object",
      "description": "Represents a user's step count for a specific date.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Step record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Step)"
        },
        "date": {
          "type": "string",
          "description": "The date for which the step count is recorded.",
          "format": "date"
        },
        "count": {
          "type": "number",
          "description": "The number of steps taken on the specified date."
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "count"
      ]
    },
    "FoodLog": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FoodLog",
      "type": "object",
      "description": "Represents a user's food log entry for a specific meal and date.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the FoodLog record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N FoodLog)"
        },
        "date": {
          "type": "string",
          "description": "The date on which the food was consumed.",
          "format": "date"
        },
        "meal": {
          "type": "string",
          "description": "Description of the meal consumed (e.g., breakfast, lunch, dinner)."
        },
        "foodItems": {
          "type": "string",
          "description": "Name of food logged."
        },
        "nutritionInformation": {
          "type": "string",
          "description": "JSON blob of nutrition info"
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "meal",
        "foodItems"
      ]
    },
    "SleepLog": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SleepLog",
      "type": "object",
      "description": "Represents a user's sleep log entry.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the SleepLog record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N SleepLog)"
        },
        "sleepStart": {
          "type": "string",
          "description": "Timestamp indicating when the user started sleeping.",
          "format": "date-time"
        },
        "sleepEnd": {
          "type": "string",
          "description": "Timestamp indicating when the user stopped sleeping.",
          "format": "date-time"
        },
        "sleepDuration": {
          "type": "number",
          "description": "Sleep duration in minutes."
        }
      },
      "required": [
        "id",
        "userId",
        "sleepStart",
        "sleepEnd",
        "sleepDuration"
      ]
    },
    "Reward": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Reward",
      "type": "object",
      "description": "Represents a reward or badge earned by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Reward record."
        },
        "name": {
          "type": "string",
          "description": "Name of the reward (e.g., 'First 10,000 Steps')."
        },
        "description": {
          "type": "string",
          "description": "Description of how to earn the reward."
        },
        "points": {
          "type": "number",
          "description": "Number of points awarded for earning the reward."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the image representing the reward."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "points",
        "imageUrl"
      ]
    },
    "UserReward": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserReward",
      "type": "object",
      "description": "Represents the association between a user and a reward they have earned.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserReward record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N UserReward)"
        },
        "rewardId": {
          "type": "string",
          "description": "Reference to Reward. (Relationship: Reward 1:N UserReward)"
        },
        "earnedAt": {
          "type": "string",
          "description": "Timestamp indicating when the reward was earned.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "rewardId",
        "earnedAt"
      ]
    },
    "LeaderboardEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeaderboardEntry",
      "type": "object",
      "description": "Represents an entry in the leaderboard, showing a user's ranking and points.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the LeaderboardEntry record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N LeaderboardEntry)"
        },
        "points": {
          "type": "number",
          "description": "The user's total points."
        },
        "rank": {
          "type": "number",
          "description": "The user's rank on the leaderboard."
        },
        "leaderboardDate": {
          "type": "string",
          "description": "The date for which the leaderboard entry is valid.",
          "format": "date"
        }
      },
      "required": [
        "id",
        "userId",
        "points",
        "rank",
        "leaderboardDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information, including username, password hash, and wallet address. This path enforces path-based ownership, ensuring only the authenticated user can access their own data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/steps/{stepId}",
        "definition": {
          "entityName": "Step",
          "schema": {
            "$ref": "#/backend/entities/Step"
          },
          "description": "Stores user's step data, owned by the user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "stepId",
              "description": "The unique identifier for the step record."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/foodLogs/{foodLogId}",
        "definition": {
          "entityName": "FoodLog",
          "schema": {
            "$ref": "#/backend/entities/FoodLog"
          },
          "description": "Stores user's food log data, owned by the user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "foodLogId",
              "description": "The unique identifier for the food log record."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/sleepLogs/{sleepLogId}",
        "definition": {
          "entityName": "SleepLog",
          "schema": {
            "$ref": "#/backend/entities/SleepLog"
          },
          "description": "Stores user's sleep log data, owned by the user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "sleepLogId",
              "description": "The unique identifier for the sleep log record."
            }
          ]
        }
      },
      {
        "path": "/rewards/{rewardId}",
        "definition": {
          "entityName": "Reward",
          "schema": {
            "$ref": "#/backend/entities/Reward"
          },
          "description": "Stores reward definitions.",
          "params": [
            {
              "name": "rewardId",
              "description": "The unique identifier for the reward."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/userRewards/{userRewardId}",
        "definition": {
          "entityName": "UserReward",
          "schema": {
            "$ref": "#/backend/entities/UserReward"
          },
          "description": "Stores user's rewards data, owned by the user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "userRewardId",
              "description": "The unique identifier for the user reward record."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/leaderboardEntries/{leaderboardEntryId}",
        "definition": {
          "entityName": "LeaderboardEntry",
          "schema": {
            "$ref": "#/backend/entities/LeaderboardEntry"
          },
          "description": "Stores leaderboard entries for each user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "leaderboardEntryId",
              "description": "The unique identifier for the leaderboard entry record."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure prioritizes security and scalability for the BodyBase application, especially concerning user authentication and data ownership. It leverages structural segregation and denormalization to ensure authorization independence and simple, robust security rules.\n\n*   **User Data:** User data, including usernames, password hashes, and wallet addresses, is stored in the `/users/{userId}` collection. This follows the recommended pattern for private data using path-based ownership, which ensures that only the authenticated user can access their own data. The username is stored alongside the wallet address to fulfill the requirement of mapping usernames to wallet addresses.\n*   **Step, FoodLog, SleepLog, UserReward and LeaderboardEntry:** Subcollections under `/users/{userId}` are used to store steps, food logs, sleep logs, rewards and leaderboard entries. This enforces clear ownership and simplifies security rules, as all data within these subcollections is inherently owned by the user identified by `{userId}`. This approach ensures that list operations are secure, as rules can easily filter based on the path.\n*   **Rewards:** The rewards themselves are stored in a flat `/rewards/{rewardId}` collection. This is because rewards are global and not user-specific. This allows for easy management of rewards without impacting user-specific data.\n\nThis design achieves Authorization Independence by avoiding the need for `get()` calls in security rules. All necessary authorization information (user ID) is embedded in the path. This simplifies rules and enhances the atomicity of operations. Structural Segregation is applied by separating user-specific data into subcollections, ensuring a homogeneous security posture for each collection."
  }
}